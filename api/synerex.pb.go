// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: synerex.proto

package synerex_api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GatewayType int32

const (
	GatewayType_BIDIRECTIONAL GatewayType = 0 // normal gateway
	GatewayType_WRITE_ONLY    GatewayType = 1 // no need to receive
	GatewayType_READ_ONLY     GatewayType = 2 //
)

// Enum value maps for GatewayType.
var (
	GatewayType_name = map[int32]string{
		0: "BIDIRECTIONAL",
		1: "WRITE_ONLY",
		2: "READ_ONLY",
	}
	GatewayType_value = map[string]int32{
		"BIDIRECTIONAL": 0,
		"WRITE_ONLY":    1,
		"READ_ONLY":     2,
	}
)

func (x GatewayType) Enum() *GatewayType {
	p := new(GatewayType)
	*p = x
	return p
}

func (x GatewayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayType) Descriptor() protoreflect.EnumDescriptor {
	return file_synerex_proto_enumTypes[0].Descriptor()
}

func (GatewayType) Type() protoreflect.EnumType {
	return &file_synerex_proto_enumTypes[0]
}

func (x GatewayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayType.Descriptor instead.
func (GatewayType) EnumDescriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{0}
}

type MsgType int32

const (
	MsgType_DEMAND  MsgType = 0
	MsgType_SUPPLY  MsgType = 1
	MsgType_TARGET  MsgType = 2 // target for select/confirm
	MsgType_MBUS    MsgType = 3 // mbus id for subscribe
	MsgType_MBUSMSG MsgType = 4
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "DEMAND",
		1: "SUPPLY",
		2: "TARGET",
		3: "MBUS",
		4: "MBUSMSG",
	}
	MsgType_value = map[string]int32{
		"DEMAND":  0,
		"SUPPLY":  1,
		"TARGET":  2,
		"MBUS":    3,
		"MBUSMSG": 4,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_synerex_proto_enumTypes[1].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_synerex_proto_enumTypes[1]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{1}
}

type MbusOpt_MbusType int32

const (
	MbusOpt_PUBLIC  MbusOpt_MbusType = 0
	MbusOpt_PRIVATE MbusOpt_MbusType = 1
)

// Enum value maps for MbusOpt_MbusType.
var (
	MbusOpt_MbusType_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
	}
	MbusOpt_MbusType_value = map[string]int32{
		"PUBLIC":  0,
		"PRIVATE": 1,
	}
)

func (x MbusOpt_MbusType) Enum() *MbusOpt_MbusType {
	p := new(MbusOpt_MbusType)
	*p = x
	return p
}

func (x MbusOpt_MbusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MbusOpt_MbusType) Descriptor() protoreflect.EnumDescriptor {
	return file_synerex_proto_enumTypes[2].Descriptor()
}

func (MbusOpt_MbusType) Type() protoreflect.EnumType {
	return &file_synerex_proto_enumTypes[2]
}

func (x MbusOpt_MbusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MbusOpt_MbusType.Descriptor instead.
func (MbusOpt_MbusType) EnumDescriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{9, 0}
}

type MbusState_MbusStatus int32

const (
	MbusState_INTIALIZED  MbusState_MbusStatus = 0 // just created (no subscribers)
	MbusState_SUBSCRIBERS MbusState_MbusStatus = 1 // there are some subscribers
	MbusState_CLOSED      MbusState_MbusStatus = 2 // closed mbus
	MbusState_INVALID     MbusState_MbusStatus = 3 // no mbus is available with the mbus_id or hidden.
)

// Enum value maps for MbusState_MbusStatus.
var (
	MbusState_MbusStatus_name = map[int32]string{
		0: "INTIALIZED",
		1: "SUBSCRIBERS",
		2: "CLOSED",
		3: "INVALID",
	}
	MbusState_MbusStatus_value = map[string]int32{
		"INTIALIZED":  0,
		"SUBSCRIBERS": 1,
		"CLOSED":      2,
		"INVALID":     3,
	}
)

func (x MbusState_MbusStatus) Enum() *MbusState_MbusStatus {
	p := new(MbusState_MbusStatus)
	*p = x
	return p
}

func (x MbusState_MbusStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MbusState_MbusStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_synerex_proto_enumTypes[3].Descriptor()
}

func (MbusState_MbusStatus) Type() protoreflect.EnumType {
	return &file_synerex_proto_enumTypes[3]
}

func (x MbusState_MbusStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MbusState_MbusStatus.Descriptor instead.
func (MbusState_MbusStatus) EnumDescriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{10, 0}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok  bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *Response) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	MbusId uint64             `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Wait   *duration.Duration `protobuf:"bytes,3,opt,name=wait,proto3" json:"wait,omitempty"`
	Err    string             `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ConfirmResponse) Reset() {
	*x = ConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmResponse) ProtoMessage() {}

func (x *ConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmResponse.ProtoReflect.Descriptor instead.
func (*ConfirmResponse) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{1}
}

func (x *ConfirmResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ConfirmResponse) GetMbusId() uint64 {
	if x != nil {
		return x.MbusId
	}
	return 0
}

func (x *ConfirmResponse) GetWait() *duration.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

func (x *ConfirmResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity []byte `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{2}
}

func (x *Content) GetEntity() []byte {
	if x != nil {
		return x.Entity
	}
	return nil
}

type Supply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId    uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId    uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`         // for message id (not for sender_id)
	ChannelType uint32               `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"` // channel type
	SupplyName  string               `protobuf:"bytes,5,opt,name=supply_name,json=supplyName,proto3" json:"supply_name,omitempty"`
	Ts          *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	ArgJson     string               `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId      uint64               `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"` // new mbus id for select demand.
	Cdata       *Content             `protobuf:"bytes,9,opt,name=cdata,proto3" json:"cdata,omitempty"`                   // content data
}

func (x *Supply) Reset() {
	*x = Supply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Supply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Supply) ProtoMessage() {}

func (x *Supply) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Supply.ProtoReflect.Descriptor instead.
func (*Supply) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{3}
}

func (x *Supply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Supply) GetSenderId() uint64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *Supply) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *Supply) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *Supply) GetSupplyName() string {
	if x != nil {
		return x.SupplyName
	}
	return ""
}

func (x *Supply) GetTs() *timestamp.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Supply) GetArgJson() string {
	if x != nil {
		return x.ArgJson
	}
	return ""
}

func (x *Supply) GetMbusId() uint64 {
	if x != nil {
		return x.MbusId
	}
	return 0
}

func (x *Supply) GetCdata() *Content {
	if x != nil {
		return x.Cdata
	}
	return nil
}

type Demand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId    uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId    uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`         // if set with message id (not for sender_id) (select for supply)
	ChannelType uint32               `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"` // channel type
	DemandName  string               `protobuf:"bytes,5,opt,name=demand_name,json=demandName,proto3" json:"demand_name,omitempty"`
	Ts          *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	ArgJson     string               `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId      uint64               `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"` // new mbus id for select supply...
	Cdata       *Content             `protobuf:"bytes,9,opt,name=cdata,proto3" json:"cdata,omitempty"`                   // content data
}

func (x *Demand) Reset() {
	*x = Demand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Demand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Demand) ProtoMessage() {}

func (x *Demand) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Demand.ProtoReflect.Descriptor instead.
func (*Demand) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{4}
}

func (x *Demand) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Demand) GetSenderId() uint64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *Demand) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *Demand) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *Demand) GetDemandName() string {
	if x != nil {
		return x.DemandName
	}
	return ""
}

func (x *Demand) GetTs() *timestamp.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Demand) GetArgJson() string {
	if x != nil {
		return x.ArgJson
	}
	return ""
}

func (x *Demand) GetMbusId() uint64 {
	if x != nil {
		return x.MbusId
	}
	return 0
}

func (x *Demand) GetCdata() *Content {
	if x != nil {
		return x.Cdata
	}
	return nil
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64             `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId    uint64             `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId    uint64             `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`         // for target
	ChannelType uint32             `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"` // channel type
	Wait        *duration.Duration `protobuf:"bytes,5,opt,name=wait,proto3" json:"wait,omitempty"`
	MbusId      uint64             `protobuf:"fixed64,6,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"` // if you need message bus, set Mbus with mbus_id = 1
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{5}
}

func (x *Target) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Target) GetSenderId() uint64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *Target) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *Target) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *Target) GetWait() *duration.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

func (x *Target) GetMbusId() uint64 {
	if x != nil {
		return x.MbusId
	}
	return 0
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    uint64 `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChannelType uint32 `protobuf:"varint,2,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"` // channel type
	ArgJson     string `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`              // for Channel Argument
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{6}
}

func (x *Channel) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Channel) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *Channel) GetArgJson() string {
	if x != nil {
		return x.ArgJson
	}
	return ""
}

type Mbus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	MbusId   uint64 `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	ArgJson  string `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"` // for mbus description
}

func (x *Mbus) Reset() {
	*x = Mbus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mbus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mbus) ProtoMessage() {}

func (x *Mbus) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mbus.ProtoReflect.Descriptor instead.
func (*Mbus) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{7}
}

func (x *Mbus) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Mbus) GetMbusId() uint64 {
	if x != nil {
		return x.MbusId
	}
	return 0
}

func (x *Mbus) GetArgJson() string {
	if x != nil {
		return x.ArgJson
	}
	return ""
}

type MbusMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    uint64   `protobuf:"fixed64,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"` // if 0 for close message
	SenderId uint64   `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId uint64   `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"` // for target // if 0 for broadcast in mbus
	MbusId   uint64   `protobuf:"fixed64,4,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	MsgType  uint32   `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"` // for message type
	MsgInfo  string   `protobuf:"bytes,6,opt,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`  // for abstract information
	ArgJson  string   `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	Cdata    *Content `protobuf:"bytes,8,opt,name=cdata,proto3" json:"cdata,omitempty"` // content data (enbedded from v0.4.0)
}

func (x *MbusMsg) Reset() {
	*x = MbusMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbusMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbusMsg) ProtoMessage() {}

func (x *MbusMsg) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbusMsg.ProtoReflect.Descriptor instead.
func (*MbusMsg) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{8}
}

func (x *MbusMsg) GetMsgId() uint64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MbusMsg) GetSenderId() uint64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *MbusMsg) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *MbusMsg) GetMbusId() uint64 {
	if x != nil {
		return x.MbusId
	}
	return 0
}

func (x *MbusMsg) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *MbusMsg) GetMsgInfo() string {
	if x != nil {
		return x.MsgInfo
	}
	return ""
}

func (x *MbusMsg) GetArgJson() string {
	if x != nil {
		return x.ArgJson
	}
	return ""
}

func (x *MbusMsg) GetCdata() *Content {
	if x != nil {
		return x.Cdata
	}
	return nil
}

// options for creating Mbus from v0.4.0
type MbusOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MbusType    MbusOpt_MbusType `protobuf:"varint,1,opt,name=mbus_type,json=mbusType,proto3,enum=api.MbusOpt_MbusType" json:"mbus_type,omitempty"`
	Subscribers []uint64         `protobuf:"fixed64,2,rep,packed,name=subscribers,proto3" json:"subscribers,omitempty"` // use this for limiting subscribers
}

func (x *MbusOpt) Reset() {
	*x = MbusOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbusOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbusOpt) ProtoMessage() {}

func (x *MbusOpt) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbusOpt.ProtoReflect.Descriptor instead.
func (*MbusOpt) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{9}
}

func (x *MbusOpt) GetMbusType() MbusOpt_MbusType {
	if x != nil {
		return x.MbusType
	}
	return MbusOpt_PUBLIC
}

func (x *MbusOpt) GetSubscribers() []uint64 {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// message for obtaining mbus state from 0.4.0
type MbusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MbusId      uint64               `protobuf:"fixed64,1,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Status      MbusState_MbusStatus `protobuf:"varint,2,opt,name=status,proto3,enum=api.MbusState_MbusStatus" json:"status,omitempty"`
	Subscribers []uint64             `protobuf:"fixed64,3,rep,packed,name=subscribers,proto3" json:"subscribers,omitempty"` // subscriber count  (only with status= SUBSCRIBERS)
}

func (x *MbusState) Reset() {
	*x = MbusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MbusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MbusState) ProtoMessage() {}

func (x *MbusState) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MbusState.ProtoReflect.Descriptor instead.
func (*MbusState) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{10}
}

func (x *MbusState) GetMbusId() uint64 {
	if x != nil {
		return x.MbusId
	}
	return 0
}

func (x *MbusState) GetStatus() MbusState_MbusStatus {
	if x != nil {
		return x.Status
	}
	return MbusState_INTIALIZED
}

func (x *MbusState) GetSubscribers() []uint64 {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

type GatewayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    uint64      `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // client_id (snowflake) of gateway
	GatewayType GatewayType `protobuf:"varint,2,opt,name=gateway_type,json=gatewayType,proto3,enum=api.GatewayType" json:"gateway_type,omitempty"`
	Channels    []uint32    `protobuf:"varint,3,rep,packed,name=channels,proto3" json:"channels,omitempty"` // which channel for forward
}

func (x *GatewayInfo) Reset() {
	*x = GatewayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfo) ProtoMessage() {}

func (x *GatewayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfo.ProtoReflect.Descriptor instead.
func (*GatewayInfo) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{11}
}

func (x *GatewayInfo) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *GatewayInfo) GetGatewayType() GatewayType {
	if x != nil {
		return x.GatewayType
	}
	return GatewayType_BIDIRECTIONAL
}

func (x *GatewayInfo) GetChannels() []uint32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

// Subscribe from Gateway to SynerexServer
type GatewayMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcSynerexId uint64  `protobuf:"fixed64,1,opt,name=src_synerex_id,json=srcSynerexId,proto3" json:"src_synerex_id,omitempty"`
	MsgType      MsgType `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3,enum=api.MsgType" json:"msg_type,omitempty"` // massage type
	// Types that are assignable to MsgOneof:
	//	*GatewayMsg_Demand
	//	*GatewayMsg_Supply
	//	*GatewayMsg_Target
	//	*GatewayMsg_Mbus
	//	*GatewayMsg_MbusMsg
	MsgOneof isGatewayMsg_MsgOneof `protobuf_oneof:"msg_oneof"`
}

func (x *GatewayMsg) Reset() {
	*x = GatewayMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMsg) ProtoMessage() {}

func (x *GatewayMsg) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMsg.ProtoReflect.Descriptor instead.
func (*GatewayMsg) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{12}
}

func (x *GatewayMsg) GetSrcSynerexId() uint64 {
	if x != nil {
		return x.SrcSynerexId
	}
	return 0
}

func (x *GatewayMsg) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_DEMAND
}

func (m *GatewayMsg) GetMsgOneof() isGatewayMsg_MsgOneof {
	if m != nil {
		return m.MsgOneof
	}
	return nil
}

func (x *GatewayMsg) GetDemand() *Demand {
	if x, ok := x.GetMsgOneof().(*GatewayMsg_Demand); ok {
		return x.Demand
	}
	return nil
}

func (x *GatewayMsg) GetSupply() *Supply {
	if x, ok := x.GetMsgOneof().(*GatewayMsg_Supply); ok {
		return x.Supply
	}
	return nil
}

func (x *GatewayMsg) GetTarget() *Target {
	if x, ok := x.GetMsgOneof().(*GatewayMsg_Target); ok {
		return x.Target
	}
	return nil
}

func (x *GatewayMsg) GetMbus() *Mbus {
	if x, ok := x.GetMsgOneof().(*GatewayMsg_Mbus); ok {
		return x.Mbus
	}
	return nil
}

func (x *GatewayMsg) GetMbusMsg() *MbusMsg {
	if x, ok := x.GetMsgOneof().(*GatewayMsg_MbusMsg); ok {
		return x.MbusMsg
	}
	return nil
}

type isGatewayMsg_MsgOneof interface {
	isGatewayMsg_MsgOneof()
}

type GatewayMsg_Demand struct {
	Demand *Demand `protobuf:"bytes,3,opt,name=demand,proto3,oneof"`
}

type GatewayMsg_Supply struct {
	Supply *Supply `protobuf:"bytes,4,opt,name=supply,proto3,oneof"`
}

type GatewayMsg_Target struct {
	Target *Target `protobuf:"bytes,5,opt,name=target,proto3,oneof"`
}

type GatewayMsg_Mbus struct {
	Mbus *Mbus `protobuf:"bytes,6,opt,name=mbus,proto3,oneof"`
}

type GatewayMsg_MbusMsg struct {
	MbusMsg *MbusMsg `protobuf:"bytes,7,opt,name=mbus_msg,json=mbusMsg,proto3,oneof"`
}

func (*GatewayMsg_Demand) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Supply) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Target) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_Mbus) isGatewayMsg_MsgOneof() {}

func (*GatewayMsg_MbusMsg) isGatewayMsg_MsgOneof() {}

type ProviderID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ArgJson  string `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"` // for Any Argument
}

func (x *ProviderID) Reset() {
	*x = ProviderID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_synerex_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderID) ProtoMessage() {}

func (x *ProviderID) ProtoReflect() protoreflect.Message {
	mi := &file_synerex_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderID.ProtoReflect.Descriptor instead.
func (*ProviderID) Descriptor() ([]byte, []int) {
	return file_synerex_proto_rawDescGZIP(), []int{13}
}

func (x *ProviderID) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ProviderID) GetArgJson() string {
	if x != nil {
		return x.ArgJson
	}
	return ""
}

var File_synerex_proto protoreflect.FileDescriptor

var file_synerex_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x22, 0x7b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x22, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x9a, 0x02, 0x0a, 0x06, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05,
	0x63, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x9a, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x06, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x01,
	0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x64, 0x22, 0x64, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x4a,
	0x73, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x04, 0x4d, 0x62, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x6d, 0x62, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xe8, 0x01, 0x0a,
	0x07, 0x4d, 0x62, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x6d, 0x62, 0x75, 0x73,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x07, 0x4d, 0x62, 0x75, 0x73,
	0x4f, 0x70, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x62, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75,
	0x73, 0x4f, 0x70, 0x74, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d,
	0x62, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x23, 0x0a, 0x08, 0x4d, 0x62, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x22, 0xc1,
	0x01, 0x0a, 0x09, 0x4d, 0x62, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x62, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x6d,
	0x62, 0x75, 0x73, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x46, 0x0a, 0x0a, 0x4d, 0x62,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x03, 0x22, 0x7b, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0xa9, 0x02, 0x0a, 0x0a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x53, 0x79, 0x6e, 0x65, 0x72,
	0x65, 0x78, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x62, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6d,
	0x62, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x62, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73,
	0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x62, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x42, 0x0b,
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x44, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x4a, 0x73, 0x6f,
	0x6e, 0x2a, 0x3f, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x2a, 0x44, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x42, 0x55, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x42, 0x55, 0x53, 0x4d, 0x53, 0x47, 0x10, 0x04, 0x32, 0xa6, 0x07, 0x0a, 0x07, 0x53, 0x79, 0x6e,
	0x65, 0x72, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x1a,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x62, 0x75, 0x73, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x4f, 0x70,
	0x74, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x22, 0x00, 0x12, 0x27,
	0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x62, 0x75, 0x73, 0x12, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x62, 0x75, 0x73, 0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x62, 0x75, 0x73, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x62, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x62, 0x75, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x1a, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x62, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x73, 0x67,
	0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x33, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x10, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x79, 0x6e, 0x65, 0x72, 0x65, 0x78, 0x2f, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x65, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_synerex_proto_rawDescOnce sync.Once
	file_synerex_proto_rawDescData = file_synerex_proto_rawDesc
)

func file_synerex_proto_rawDescGZIP() []byte {
	file_synerex_proto_rawDescOnce.Do(func() {
		file_synerex_proto_rawDescData = protoimpl.X.CompressGZIP(file_synerex_proto_rawDescData)
	})
	return file_synerex_proto_rawDescData
}

var file_synerex_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_synerex_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_synerex_proto_goTypes = []interface{}{
	(GatewayType)(0),            // 0: api.GatewayType
	(MsgType)(0),                // 1: api.MsgType
	(MbusOpt_MbusType)(0),       // 2: api.MbusOpt.MbusType
	(MbusState_MbusStatus)(0),   // 3: api.MbusState.MbusStatus
	(*Response)(nil),            // 4: api.Response
	(*ConfirmResponse)(nil),     // 5: api.ConfirmResponse
	(*Content)(nil),             // 6: api.Content
	(*Supply)(nil),              // 7: api.Supply
	(*Demand)(nil),              // 8: api.Demand
	(*Target)(nil),              // 9: api.Target
	(*Channel)(nil),             // 10: api.Channel
	(*Mbus)(nil),                // 11: api.Mbus
	(*MbusMsg)(nil),             // 12: api.MbusMsg
	(*MbusOpt)(nil),             // 13: api.MbusOpt
	(*MbusState)(nil),           // 14: api.MbusState
	(*GatewayInfo)(nil),         // 15: api.GatewayInfo
	(*GatewayMsg)(nil),          // 16: api.GatewayMsg
	(*ProviderID)(nil),          // 17: api.ProviderID
	(*duration.Duration)(nil),   // 18: google.protobuf.Duration
	(*timestamp.Timestamp)(nil), // 19: google.protobuf.Timestamp
}
var file_synerex_proto_depIdxs = []int32{
	18, // 0: api.ConfirmResponse.wait:type_name -> google.protobuf.Duration
	19, // 1: api.Supply.ts:type_name -> google.protobuf.Timestamp
	6,  // 2: api.Supply.cdata:type_name -> api.Content
	19, // 3: api.Demand.ts:type_name -> google.protobuf.Timestamp
	6,  // 4: api.Demand.cdata:type_name -> api.Content
	18, // 5: api.Target.wait:type_name -> google.protobuf.Duration
	6,  // 6: api.MbusMsg.cdata:type_name -> api.Content
	2,  // 7: api.MbusOpt.mbus_type:type_name -> api.MbusOpt.MbusType
	3,  // 8: api.MbusState.status:type_name -> api.MbusState.MbusStatus
	0,  // 9: api.GatewayInfo.gateway_type:type_name -> api.GatewayType
	1,  // 10: api.GatewayMsg.msg_type:type_name -> api.MsgType
	8,  // 11: api.GatewayMsg.demand:type_name -> api.Demand
	7,  // 12: api.GatewayMsg.supply:type_name -> api.Supply
	9,  // 13: api.GatewayMsg.target:type_name -> api.Target
	11, // 14: api.GatewayMsg.mbus:type_name -> api.Mbus
	12, // 15: api.GatewayMsg.mbus_msg:type_name -> api.MbusMsg
	8,  // 16: api.Synerex.NotifyDemand:input_type -> api.Demand
	7,  // 17: api.Synerex.NotifySupply:input_type -> api.Supply
	8,  // 18: api.Synerex.ProposeDemand:input_type -> api.Demand
	7,  // 19: api.Synerex.ProposeSupply:input_type -> api.Supply
	9,  // 20: api.Synerex.SelectSupply:input_type -> api.Target
	9,  // 21: api.Synerex.SelectDemand:input_type -> api.Target
	9,  // 22: api.Synerex.Confirm:input_type -> api.Target
	10, // 23: api.Synerex.SubscribeDemand:input_type -> api.Channel
	10, // 24: api.Synerex.SubscribeSupply:input_type -> api.Channel
	13, // 25: api.Synerex.CreateMbus:input_type -> api.MbusOpt
	11, // 26: api.Synerex.CloseMbus:input_type -> api.Mbus
	11, // 27: api.Synerex.SubscribeMbus:input_type -> api.Mbus
	12, // 28: api.Synerex.SendMbusMsg:input_type -> api.MbusMsg
	11, // 29: api.Synerex.GetMbusState:input_type -> api.Mbus
	15, // 30: api.Synerex.SubscribeGateway:input_type -> api.GatewayInfo
	16, // 31: api.Synerex.ForwardToGateway:input_type -> api.GatewayMsg
	10, // 32: api.Synerex.CloseDemandChannel:input_type -> api.Channel
	10, // 33: api.Synerex.CloseSupplyChannel:input_type -> api.Channel
	17, // 34: api.Synerex.CloseAllChannels:input_type -> api.ProviderID
	4,  // 35: api.Synerex.NotifyDemand:output_type -> api.Response
	4,  // 36: api.Synerex.NotifySupply:output_type -> api.Response
	4,  // 37: api.Synerex.ProposeDemand:output_type -> api.Response
	4,  // 38: api.Synerex.ProposeSupply:output_type -> api.Response
	5,  // 39: api.Synerex.SelectSupply:output_type -> api.ConfirmResponse
	5,  // 40: api.Synerex.SelectDemand:output_type -> api.ConfirmResponse
	4,  // 41: api.Synerex.Confirm:output_type -> api.Response
	8,  // 42: api.Synerex.SubscribeDemand:output_type -> api.Demand
	7,  // 43: api.Synerex.SubscribeSupply:output_type -> api.Supply
	11, // 44: api.Synerex.CreateMbus:output_type -> api.Mbus
	4,  // 45: api.Synerex.CloseMbus:output_type -> api.Response
	12, // 46: api.Synerex.SubscribeMbus:output_type -> api.MbusMsg
	4,  // 47: api.Synerex.SendMbusMsg:output_type -> api.Response
	14, // 48: api.Synerex.GetMbusState:output_type -> api.MbusState
	16, // 49: api.Synerex.SubscribeGateway:output_type -> api.GatewayMsg
	4,  // 50: api.Synerex.ForwardToGateway:output_type -> api.Response
	4,  // 51: api.Synerex.CloseDemandChannel:output_type -> api.Response
	4,  // 52: api.Synerex.CloseSupplyChannel:output_type -> api.Response
	4,  // 53: api.Synerex.CloseAllChannels:output_type -> api.Response
	35, // [35:54] is the sub-list for method output_type
	16, // [16:35] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_synerex_proto_init() }
func file_synerex_proto_init() {
	if File_synerex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_synerex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Supply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Demand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mbus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbusMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbusOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MbusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_synerex_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_synerex_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GatewayMsg_Demand)(nil),
		(*GatewayMsg_Supply)(nil),
		(*GatewayMsg_Target)(nil),
		(*GatewayMsg_Mbus)(nil),
		(*GatewayMsg_MbusMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_synerex_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_synerex_proto_goTypes,
		DependencyIndexes: file_synerex_proto_depIdxs,
		EnumInfos:         file_synerex_proto_enumTypes,
		MessageInfos:      file_synerex_proto_msgTypes,
	}.Build()
	File_synerex_proto = out.File
	file_synerex_proto_rawDesc = nil
	file_synerex_proto_goTypes = nil
	file_synerex_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SynerexClient is the client API for Synerex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SynerexClient interface {
	NotifyDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	NotifySupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error)
	SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error)
	SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error)
	CreateMbus(ctx context.Context, in *MbusOpt, opts ...grpc.CallOption) (*Mbus, error)
	CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error)
	SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error)
	SendMbusMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error)
	GetMbusState(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*MbusState, error)
	SubscribeGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (Synerex_SubscribeGatewayClient, error)
	ForwardToGateway(ctx context.Context, in *GatewayMsg, opts ...grpc.CallOption) (*Response, error)
	CloseDemandChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error)
	CloseSupplyChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error)
	CloseAllChannels(ctx context.Context, in *ProviderID, opts ...grpc.CallOption) (*Response, error)
}

type synerexClient struct {
	cc grpc.ClientConnInterface
}

func NewSynerexClient(cc grpc.ClientConnInterface) SynerexClient {
	return &synerexClient{cc}
}

func (c *synerexClient) NotifyDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/NotifyDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) NotifySupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/NotifySupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[0], "/api.Synerex/SubscribeDemand", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeDemandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeDemandClient interface {
	Recv() (*Demand, error)
	grpc.ClientStream
}

type synerexSubscribeDemandClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeDemandClient) Recv() (*Demand, error) {
	m := new(Demand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[1], "/api.Synerex/SubscribeSupply", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeSupplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeSupplyClient interface {
	Recv() (*Supply, error)
	grpc.ClientStream
}

type synerexSubscribeSupplyClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeSupplyClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) CreateMbus(ctx context.Context, in *MbusOpt, opts ...grpc.CallOption) (*Mbus, error) {
	out := new(Mbus)
	err := c.cc.Invoke(ctx, "/api.Synerex/CreateMbus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseMbus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[2], "/api.Synerex/SubscribeMbus", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeMbusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeMbusClient interface {
	Recv() (*MbusMsg, error)
	grpc.ClientStream
}

type synerexSubscribeMbusClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeMbusClient) Recv() (*MbusMsg, error) {
	m := new(MbusMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SendMbusMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/SendMbusMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) GetMbusState(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*MbusState, error) {
	out := new(MbusState)
	err := c.cc.Invoke(ctx, "/api.Synerex/GetMbusState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (Synerex_SubscribeGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[3], "/api.Synerex/SubscribeGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeGatewayClient interface {
	Recv() (*GatewayMsg, error)
	grpc.ClientStream
}

type synerexSubscribeGatewayClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeGatewayClient) Recv() (*GatewayMsg, error) {
	m := new(GatewayMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) ForwardToGateway(ctx context.Context, in *GatewayMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ForwardToGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseDemandChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseDemandChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseSupplyChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseSupplyChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseAllChannels(ctx context.Context, in *ProviderID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseAllChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynerexServer is the server API for Synerex service.
type SynerexServer interface {
	NotifyDemand(context.Context, *Demand) (*Response, error)
	NotifySupply(context.Context, *Supply) (*Response, error)
	ProposeDemand(context.Context, *Demand) (*Response, error)
	ProposeSupply(context.Context, *Supply) (*Response, error)
	SelectSupply(context.Context, *Target) (*ConfirmResponse, error)
	SelectDemand(context.Context, *Target) (*ConfirmResponse, error)
	Confirm(context.Context, *Target) (*Response, error)
	SubscribeDemand(*Channel, Synerex_SubscribeDemandServer) error
	SubscribeSupply(*Channel, Synerex_SubscribeSupplyServer) error
	CreateMbus(context.Context, *MbusOpt) (*Mbus, error)
	CloseMbus(context.Context, *Mbus) (*Response, error)
	SubscribeMbus(*Mbus, Synerex_SubscribeMbusServer) error
	SendMbusMsg(context.Context, *MbusMsg) (*Response, error)
	GetMbusState(context.Context, *Mbus) (*MbusState, error)
	SubscribeGateway(*GatewayInfo, Synerex_SubscribeGatewayServer) error
	ForwardToGateway(context.Context, *GatewayMsg) (*Response, error)
	CloseDemandChannel(context.Context, *Channel) (*Response, error)
	CloseSupplyChannel(context.Context, *Channel) (*Response, error)
	CloseAllChannels(context.Context, *ProviderID) (*Response, error)
}

// UnimplementedSynerexServer can be embedded to have forward compatible implementations.
type UnimplementedSynerexServer struct {
}

func (*UnimplementedSynerexServer) NotifyDemand(context.Context, *Demand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyDemand not implemented")
}
func (*UnimplementedSynerexServer) NotifySupply(context.Context, *Supply) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySupply not implemented")
}
func (*UnimplementedSynerexServer) ProposeDemand(context.Context, *Demand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeDemand not implemented")
}
func (*UnimplementedSynerexServer) ProposeSupply(context.Context, *Supply) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeSupply not implemented")
}
func (*UnimplementedSynerexServer) SelectSupply(context.Context, *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectSupply not implemented")
}
func (*UnimplementedSynerexServer) SelectDemand(context.Context, *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDemand not implemented")
}
func (*UnimplementedSynerexServer) Confirm(context.Context, *Target) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (*UnimplementedSynerexServer) SubscribeDemand(*Channel, Synerex_SubscribeDemandServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDemand not implemented")
}
func (*UnimplementedSynerexServer) SubscribeSupply(*Channel, Synerex_SubscribeSupplyServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSupply not implemented")
}
func (*UnimplementedSynerexServer) CreateMbus(context.Context, *MbusOpt) (*Mbus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMbus not implemented")
}
func (*UnimplementedSynerexServer) CloseMbus(context.Context, *Mbus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMbus not implemented")
}
func (*UnimplementedSynerexServer) SubscribeMbus(*Mbus, Synerex_SubscribeMbusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMbus not implemented")
}
func (*UnimplementedSynerexServer) SendMbusMsg(context.Context, *MbusMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMbusMsg not implemented")
}
func (*UnimplementedSynerexServer) GetMbusState(context.Context, *Mbus) (*MbusState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMbusState not implemented")
}
func (*UnimplementedSynerexServer) SubscribeGateway(*GatewayInfo, Synerex_SubscribeGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGateway not implemented")
}
func (*UnimplementedSynerexServer) ForwardToGateway(context.Context, *GatewayMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToGateway not implemented")
}
func (*UnimplementedSynerexServer) CloseDemandChannel(context.Context, *Channel) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDemandChannel not implemented")
}
func (*UnimplementedSynerexServer) CloseSupplyChannel(context.Context, *Channel) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSupplyChannel not implemented")
}
func (*UnimplementedSynerexServer) CloseAllChannels(context.Context, *ProviderID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAllChannels not implemented")
}

func RegisterSynerexServer(s *grpc.Server, srv SynerexServer) {
	s.RegisterService(&_Synerex_serviceDesc, srv)
}

func _Synerex_NotifyDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).NotifyDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/NotifyDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).NotifyDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_NotifySupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).NotifySupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/NotifySupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).NotifySupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectSupply(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectDemand(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).Confirm(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeDemand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeDemand(m, &synerexSubscribeDemandServer{stream})
}

type Synerex_SubscribeDemandServer interface {
	Send(*Demand) error
	grpc.ServerStream
}

type synerexSubscribeDemandServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeDemandServer) Send(m *Demand) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SubscribeSupply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeSupply(m, &synerexSubscribeSupplyServer{stream})
}

type Synerex_SubscribeSupplyServer interface {
	Send(*Supply) error
	grpc.ServerStream
}

type synerexSubscribeSupplyServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeSupplyServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_CreateMbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MbusOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CreateMbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CreateMbus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CreateMbus(ctx, req.(*MbusOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseMbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mbus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseMbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseMbus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseMbus(ctx, req.(*Mbus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeMbus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Mbus)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeMbus(m, &synerexSubscribeMbusServer{stream})
}

type Synerex_SubscribeMbusServer interface {
	Send(*MbusMsg) error
	grpc.ServerStream
}

type synerexSubscribeMbusServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeMbusServer) Send(m *MbusMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SendMbusMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MbusMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SendMbusMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SendMbusMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SendMbusMsg(ctx, req.(*MbusMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_GetMbusState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mbus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).GetMbusState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/GetMbusState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).GetMbusState(ctx, req.(*Mbus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeGateway(m, &synerexSubscribeGatewayServer{stream})
}

type Synerex_SubscribeGatewayServer interface {
	Send(*GatewayMsg) error
	grpc.ServerStream
}

type synerexSubscribeGatewayServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeGatewayServer) Send(m *GatewayMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_ForwardToGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ForwardToGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ForwardToGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ForwardToGateway(ctx, req.(*GatewayMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseDemandChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseDemandChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseDemandChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseDemandChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseSupplyChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseSupplyChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseSupplyChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseSupplyChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseAllChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseAllChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseAllChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseAllChannels(ctx, req.(*ProviderID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Synerex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Synerex",
	HandlerType: (*SynerexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyDemand",
			Handler:    _Synerex_NotifyDemand_Handler,
		},
		{
			MethodName: "NotifySupply",
			Handler:    _Synerex_NotifySupply_Handler,
		},
		{
			MethodName: "ProposeDemand",
			Handler:    _Synerex_ProposeDemand_Handler,
		},
		{
			MethodName: "ProposeSupply",
			Handler:    _Synerex_ProposeSupply_Handler,
		},
		{
			MethodName: "SelectSupply",
			Handler:    _Synerex_SelectSupply_Handler,
		},
		{
			MethodName: "SelectDemand",
			Handler:    _Synerex_SelectDemand_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Synerex_Confirm_Handler,
		},
		{
			MethodName: "CreateMbus",
			Handler:    _Synerex_CreateMbus_Handler,
		},
		{
			MethodName: "CloseMbus",
			Handler:    _Synerex_CloseMbus_Handler,
		},
		{
			MethodName: "SendMbusMsg",
			Handler:    _Synerex_SendMbusMsg_Handler,
		},
		{
			MethodName: "GetMbusState",
			Handler:    _Synerex_GetMbusState_Handler,
		},
		{
			MethodName: "ForwardToGateway",
			Handler:    _Synerex_ForwardToGateway_Handler,
		},
		{
			MethodName: "CloseDemandChannel",
			Handler:    _Synerex_CloseDemandChannel_Handler,
		},
		{
			MethodName: "CloseSupplyChannel",
			Handler:    _Synerex_CloseSupplyChannel_Handler,
		},
		{
			MethodName: "CloseAllChannels",
			Handler:    _Synerex_CloseAllChannels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDemand",
			Handler:       _Synerex_SubscribeDemand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSupply",
			Handler:       _Synerex_SubscribeSupply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMbus",
			Handler:       _Synerex_SubscribeMbus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGateway",
			Handler:       _Synerex_SubscribeGateway_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "synerex.proto",
}
